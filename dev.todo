Dean (whatever order u wanna do them):
	Current Task (lock inn u got this):
	▫ job-card @high
		▫ line: 32 and 33, complete the buttons for them, functions are provided for you
	▫ Fix nunito google font not loading in production @high
	▫ app/rating @high
	▫ components/inventory/offering userRole front end
		▫ onDelete, onSpend @high
		▫ onUpdate @low

	Remaining Tasks:
		▫ Mobile responsive cleanup @medium
		▫ app/rate: when error, add a button that takes back to dashboard
		▫ job-card: when click on user -> take to profile page
		▫ Add unclickable sidebar component to onboarding, explain what each tab does in onboarding
		▫ Clean up create jobs offer and add sidebar/header to page
		▫ Fix collapsed sidebar re-expanding on page change
		▫ Fix animation page change flickering @low

Kevin:
	▫ component/inventory spendOffering api call
		▫ first understand route, then write api call
	▫ notifications logic
	▫ advanced rate logic (ie. metrics tracking)

	Functionality:
		▫ Create job
			▫ new job, link hirer to A
		▫ Apply job
			▫ new job application
			▫ add B to applications
		▫ Accept job
			▫ set worker to B
		▫ Complete job
			▫ A set status COMPLETED
	Endpoints:
		▫ /create
			▫ params: user (cookies), job data
			▫ checks if user is signed in
			▫ creates job with hirer relation to user
		▫ /apply
			▫ params: job id, user (cookies)
			▫ checks if user is signed in
			▫ connects user.jobApplications to job.applications
		▫ /accept
			▫ params: job id, worker id, user (cookies)
			▫ checks if user is signed in
			▫ checks if job is user's
			▫ check if job is searching
			▫ checks if worker id is in job's applications
			▫ deletes all job.applications
			▫ sets job.status to in progress
			▫ sets job.worker to worker
			▫ add notification to worker
		▫ /complete
			▫ params: job id, user (cookies)
			▫ checks if user is signed in
			▫ checks if job is user's
			▫ sets job.status to complete
			▫ add notification to worker
		▫ /spend
			▫ params: offering id, spending data, user (cookies)
			▫ checks if user is signed in
			▫ checks if offering's_owner.jobsCreated has worker_id = user.id && status = completed -> job
			▫ check if job.payment >= offering.cost
			▫ if job quantity != null -> reduce quantity of offering
			▫ reduce jobCreated payment
			▫ send notification to offering owner
		▫ /rate
			▫ params: job id, rating data, user (cookies)
			▫ checks if user is signed in
			▫ if user is worker -> rating: rating.ratingType = hirer
			▫ if user is hirer -> rating: rating.ratingType = worker


Finish (both):
	▫ middleware private routes