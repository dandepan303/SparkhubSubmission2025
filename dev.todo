Dean (whatever order u wanna do them):
	▫ add floating message to dashbaord

	▫ inventory ui & jobs ui
	/* 
		both of these have individual cards (ie. one offering or one job)
		both need to be able to be editted (isOwner) - use onUpdate and onDelete for offering
		both need to be in list format
		both need a button for create (create offering -> createOffering() or create job -> router.push('/create-job'))
		idk choose a design that works
	*/

	▫ /app/profile/inventory line 35 error page

Kevin:
	▫ get jobs
	Functionality:
		▫ Create job
			▫ new job, link hirer to A
		▫ Apply job
			▫ new job application
			▫ add B to applications
		▫ Accept job
			▫ set worker to B
		▫ Complete job
			▫ A set status COMPLETED
	Endpoints:
		▫ /create
			▫ params: user (cookies), job data
			▫ checks if user is signed in
			▫ creates job with hirer relation to user
		▫ /apply
			▫ params: job id, user (cookies)
			▫ checks if user is signed in
			▫ connects user.jobApplications to job.applications
		▫ /accept
			▫ params: job id, worker id, user (cookies)
			▫ checks if user is signed in
			▫ checks if job is user's
			▫ check if job is searching
			▫ checks if worker id is in job's applications
			▫ deletes all job.applications
			▫ sets job.status to in progress
			▫ sets job.worker to worker
			▫ add notification to worker
		▫ /complete
			▫ params: job id, user (cookies)
			▫ checks if user is signed in
			▫ checks if job is user's
			▫ sets job.status to complete
			▫ add notification to worker
		▫ /spend
			▫ params: offering id, spending data, user (cookies)
			▫ checks if user is signed in
			▫ checks if offering's_owner.jobsCreated has worker_id = user.id && status = completed -> job
			▫ check if job.payment >= offering.cost
			▫ if job quantity != null -> reduce quantity of offering
			▫ reduce jobCreated payment
			▫ send notification to offering owner
		▫ /rate
			▫ params: job id, rating data, user (cookies)
			▫ checks if user is signed in
			▫ if user is worker -> rating: rating.ratingType = hirer
			▫ if user is hirer -> rating: rating.ratingType = worker


Finish (both):
	▫ middleware private routes