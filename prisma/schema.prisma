generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/prisma/generated"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String
  contactInfo?     String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  inventory       Inventory?
  jobApplications JobApplication[]
  jobsCreated     Job[]            @relation("JobHirer")
  jobsWorking     Job[]            @relation("JobWorker")
  ratingsGiven    Rating[]         @relation("RatingFrom")
  ratingsReceived Rating[]         @relation("RatingTo")

  @@map("users")
}

model Job {
  id           String           @id @default(cuid())
  title        String
  description  String
  location     String
  status       JobStatus        @default(SEARCHING)
  hirerId      String
  workerId     String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  completedAt  DateTime?
  applications JobApplication[]
  hirer        User             @relation("JobHirer", fields: [hirerId], references: [id], onDelete: Cascade)
  worker       User?            @relation("JobWorker", fields: [workerId], references: [id])
  ratings      Rating[]

  @@index([status])
  @@index([location])
  @@index([createdAt])
  @@map("jobs")
}

model JobApplication {
  id        String   @id @default(cuid())
  jobId     String
  userId    String
  appliedAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId])
  @@map("job_applications")
}

model Rating {
  id        String     @id @default(cuid())
  value     Int
  text      String?
  type      RatingType
  fromId    String
  toId      String
  jobId     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  from      User       @relation("RatingFrom", fields: [fromId], references: [id], onDelete: Cascade)
  job       Job?       @relation(fields: [jobId], references: [id])
  to        User       @relation("RatingTo", fields: [toId], references: [id], onDelete: Cascade)

  @@index([type])
  @@map("ratings")
}

model Inventory {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  offerings Offering[]

  @@map("inventories")
}

model Offering {
  id          String    @id @default(cuid())
  description String
  cost        Int
  quantity    Int?
  inventoryId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@map("offerings")
}

enum JobStatus {
  SEARCHING
  IN_PROGRESS
  COMPLETED
}

enum RatingType {
  HIRER
  WORKER
}
